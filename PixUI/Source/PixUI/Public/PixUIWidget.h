/**************************************************

**** @file:     PixUIWidget.h

**** @brief:    

**** @author:   tianzelei

**** @date:     2022/11/01

**** @group:    PixUI

**** @copyright: Copyright 2019 pandora. All Rights Reserved.

***************************************************/

#pragma once


#include "CoreMinimal.h"
#include "Components/CanvasPanel.h"
#include "HAL/ThreadingBase.h"
#include "Delegates/DelegateCombinations.h"

#include "PixUIDef.h"
#include "PixUIInput.h"
#include "hf_idraw.h"
#include "hf_iwindow.h"

#include "PixUIWidget.generated.h"

class UPxSubCtrlWidget;
class UPxSubCtrlWidget;
class PixDrawItem;


//UCLASS 的继承中不能有命名空间前缀，也不想使用 using namespace pixui 污染变量命名
class IPxHostProxy : public pixui::IHostWindow, public pixui::IHostDraw
{
public:
	IPxHostProxy() {};
	virtual~IPxHostProxy() {};
};


/*
EPXViewEvent It is an event generated by script code (js/lua) calling the window interface
E.G.: window.moveto(10,10) window.moveby(10,10)...
*/
UENUM(BlueprintType)
enum class EPXViewEvent :uint8
{
	em_px_event_moveby      UMETA(DisplayName = "move by this window"),
	em_px_event_moveto      UMETA(DisplayName = "move to this window"),
	em_px_event_resizeby    UMETA(DisplayName = "resize by this window"),
	em_px_event_resizeto    UMETA(DisplayName = "resize to this window"),

	em_px_event_scrollby    UMETA(DisplayName = "scroll by this window"),
	em_px_event_scrollto    UMETA(DisplayName = "scroll to this window"),

	em_px_event_count       UMETA(DisplayName = "EPXViewEvent count"),          //EPXViewEvent count
};

//declare UPixUIWidgetOld start and end delegate
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FPXWidgetOnPeriodDelegate);

//declare window event delegate
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FPXWidgetOnLoadDelegate, const FString&, url, const int, nErrorCode);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FPXWidgetOnScriptStateInitDelegate);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FPXWidgetOnInternalError, const int, ErrorCode, const FString&, MessageError);
DECLARE_DYNAMIC_DELEGATE_RetVal_FourParams(int, FPXWidgetOpenDelegate, const FString&, Url, const FString&, Name, const FString&, Features, const bool, Replace);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FPXWidgetCloseDelegate);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FPXWidgetAlertDelegate, const FString&, AlertMessage);
DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam(bool, FPXWidgetConfirmDelegate, const FString&, ConfirmMessage);
DECLARE_DYNAMIC_DELEGATE_RetVal_TwoParams(FString, FPXWidgetPromptDelegate, const FString&, Tip, const FString&, DefaultContent);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FPXWidgetTransformDelegate, EPXViewEvent, PXEventType, int32, Param1, int32, Param2);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FPXWidgetMessageDelegate, const FString&, Message);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FPXWidgetAppForegroundDelegate);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FPXWidgetAppBackgroundDelegate);


UCLASS()
class PIXUI_API UPixUIWidget : public UCanvasPanel, public IPxHostProxy, public IPxInputProxy
{
	GENERATED_BODY()

public:
	UPixUIWidget(const FObjectInitializer& ObjectInitializer);

#if WITH_EDITOR
public:
	/************************************************************************/
	//~ Begin UWidget Interface
	virtual const FText GetPaletteCategory() override;
#endif //WITH_EDITOR


protected:
	virtual TSharedRef<SWidget> RebuildWidget() override;
	//End~ UUserWidget interface
	/************************************************************************/


public:
	/************************************************************************/
	//~ Begin UVisual Interface
	virtual void ReleaseSlateResources(bool beReleaseChildren) override;
	//~ End UVisual Interface
	/************************************************************************/

	/************************************************************************/
	//~ Begin UObject Interface
	virtual void BeginDestroy() override;
	//~ End UObject Interface
	/************************************************************************/


public:
	/*********************************UFUNCTION start *********************************/

	//open page form url; such as : http://test.demo.html or /usr/tmp/demo.html or d://tmp//demo.html
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	int32 OpenPageFromUrl(const FString& fstrUrl);

	//open page form data
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	int32 OpenPageFromData(UPARAM(ref) TArray<uint8>& arry_Data, const FString& fstr_BasePath);

	//open page form game asset path,such as /Res/demo.html
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	int32 OpenPageFromGameAssetPath(const FString& fstr_File);

	//post string message to script
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void PostPxMessage(const FString& fstr_Message);

	//close this page,and Can reopen a new page
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void ClosePage();

	//Destroy this page,and Can not reopen a new page
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void DestroyPage();

	//auto deal with transform event
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void SetAutoTransform(bool b_auto);

	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	int32 GetPxWinId();

	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void CreateScriptGlobal(const FString& name);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void SetScriptGlobalNumber(const FString& name, const FString& key, float num);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void SetScriptGlobalString(const FString& name, const FString& key, const FString& str);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	void SetScriptGlobalBoolean(const FString& name, const FString& key, bool v);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	float GetScriptGlobalNumber(const FString& name, const FString& key);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	FString GetScriptGlobalString(const FString& name, const FString& key);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	bool GetScriptGlobalBoolean(const FString& name, const FString& key);
	UFUNCTION(BlueprintCallable, Category = "UPixUIWidget")
	UObject* GetSlotObjectByTagId(const FString& slotTagId);
	/*********************************UFUNCTION End   *********************************/


public:
	/*********************************Period start *********************************/
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetOnPeriodDelegate OnCloseDelegate;

	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetOnPeriodDelegate OnDestroyDelegate;
	/*********************************Period end *********************************/


	/*********************************deleage start *********************************/
	//loaded event,success or failed
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetOnLoadDelegate pixuiOnLoadedDelegate;

	//script state init event
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetOnScriptStateInitDelegate pixuiOnScriptStateInitDelegate;

	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetOnInternalError pixuiOnInternalErrorDelegate;

	//open event delegate,called by window.open
	UPROPERTY(EditAnywhere, Category = Events, meta = (IsBindableEvent = "True"))
	FPXWidgetOpenDelegate pixuiWinOpenDelegate;

	//close event delegate,called by window.close
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetCloseDelegate pixuiWinCloseDelegate;

	//alert event delegate,called by window.alert
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetAlertDelegate pixuiWinAlertDelegate;

	//confirm event delegate,called by window.confirm
	UPROPERTY(EditAnywhere, Category = Events, meta = (IsBindableEvent = "True"))
	FPXWidgetConfirmDelegate pixuiWinConfirmDelegate;

	//promp event delegate,called by window.promp
	UPROPERTY(EditAnywhere, Category = Events, meta = (IsBindableEvent = "True"))
	FPXWidgetPromptDelegate pixuiWinPrompDelegate;

	//transform event delegate,called by window.moveby/window.moveto ...,event type see EPXViewEvent
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetTransformDelegate pixuiWinTransformDelegate;

	//message event delegate,called by window.postmessage
	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetMessageDelegate pixuiWinMessageDelegate;

	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetAppForegroundDelegate pixuiWin_app_foreground_delegate;

	UPROPERTY(BlueprintAssignable, Category = Events)
	FPXWidgetAppBackgroundDelegate pixuiWin_app_background_delegate;
	/*********************************deleage end   *********************************/


public:
	/************************************************************************/
	//~ Begin IHostWindow Interface
	virtual void onLoadComplete(const char* pszUrl, const int nErrorCode) override;
	virtual void onInternalError(int error, const char* msg) override;

	virtual pixui::uint_ptr onOpen(const char* pszUrl = "", const char* pszName = "", const char* pszFeatures = "", bool bReplace = false, void* pContext = nullptr, pixui::PFunWindowOpenCallBack callback = nullptr) override;
	virtual void onClose() override;

	virtual void onAlert(const char* pszText) override;
	virtual bool onConfirm(const char* pszMessage) override;
	virtual const char* onPrompt(const char* strText, const char* strDefaultText) override;

	virtual void onMoveBy(const int nXposMoveBy, const int nYposMoveBy) override;
	virtual void onMoveTo(const int nXposMoveTo, const int nYposMoveTo) override;
	virtual void onResizeBy(const int nOffsetWidth, const int nOffsetHeight) override;
	virtual void onResizeTo(const int nNewWidth, const int nNewHeight) override;
	virtual void onScrollBy(const int nOffsetXpos, const int nOffsetYpos) override;
	virtual void onScrollTo(const int nNewXpos, const int nNewYpos) override;
	virtual int getOpener() override;
	virtual pixui::uint32 getId() override;
	virtual void setWindowPass(bool value) override;
	virtual void setWindowPriority(int value) override;
	virtual void onMessage(const char* pszMessage) override;
	virtual bool onActivateInput(pixui::EKeyboardType emKeyboardType, const char* pszDefaultText, const char* pszHintText) override;
	virtual bool onDeativateInput() override;
	virtual const char* getClipboardText() override;
	virtual void setClipboardText(const char* text) override;
	//~ End IHostWindow Interface
	/************************************************************************/


	/************************************************************************/
	//~ Begin IHostDraw Interface
	virtual void queryCapability(pixui::Capability* cap) override;
	virtual pixui::uint_ptr getContextPtr() override;
	virtual void onPrePaint() override;
	virtual void onEndPaint(const int nPaintCode) override;

	/************************************************************************/
	//Begin for slot resource
	virtual pixui::uint_ptr createSlot(const char* src) override;
	virtual void deleteSlot(pixui::uint_ptr hSlot) override;
	virtual void drawSlot(pixui::uint32 id, pixui::uint_ptr hSlot, const pixui::matrix& mat, const pixui::position& rect) override;
	//End for slot resource
	/************************************************************************/

	/************************************************************************/
	//Begin for font resource
	virtual void registerFont(pixui::IHostDraw::RegisterFontArg& arg) override;
	virtual pixui::uint_ptr createFont(
		const char* pszFontName,
		const int nSize,
		const int nWeight,
		const unsigned int unDecoration,
		const pixui::font_style emItalic,
		pixui::FontMetrics* pStFontMetrics) override;
	virtual void delFont(pixui::uint_ptr hFont) override;
	virtual float textWidth(const char* pszText, pixui::uint_ptr hFont) override;
	virtual float charWidth(uint32_t unCharCode, pixui::uint_ptr hFont) override;
	virtual int getDefaultFontSize() override;
	virtual const char* getDefaultFontName() override;
	//End for font resource
	/************************************************************************/

	virtual int ptToPix(const int nPt) override;
	virtual void setCursor(const char* pszCursor) override;


	/************************************************************************/
	//Begin for image resource
	virtual pixui::uint_ptr createImage(const char* pszName) override;
	virtual bool initImageByRawData(pixui::uint_ptr hImage, const int nWidth, const int nHeight, const int nImageFlag, const pixui::EPixelFormat emPixelFormat, const pixui::uint8* pRawData, size_t nDataSize) override;
	virtual void updateImageByRawData(pixui::uint_ptr hImage, const pixui::EPixelFormat emPixel, const pixui::uint8* pRawData, size_t nDataSize) override;
	virtual void getImageSize(pixui::uint_ptr hImage, pixui::size& sz) override;
	virtual bool isExternalImage(pixui::uint_ptr hImage) override;
	virtual bool delImage(pixui::uint_ptr hImage) override;
	//End for image resource
	/************************************************************************/

	virtual void pushClip(pixui::uint32 id, const pixui::ClipRegion& polygon) override;
	virtual void pushClip(pixui::uint32 id, const pixui::matrix& mat, const pixui::position& rcClip) override;
	virtual void popClip() override;
	virtual void pushGroup(pixui::uint32 id, const pixui::matrix& mat, const pixui::size& size) override;
	virtual void popGroup() override;
	virtual void nextRenderLayer() override;
	virtual int getCurrentRenderLayer() override;
	virtual void fillBackgroundRect(
		pixui::uint32 id,
		const pixui::matrix& mat,
		const pixui::position& rcDrawPos,
		const pixui::color& stColor,
		const pixui::BorderRadiuses& radius) override;
	virtual void drawBackgroundImage(
		pixui::uint32 id,
		pixui::uint_ptr pImage,
		const pixui::matrix& mat,
		const pixui::position& rcDraw,
		const pixui::position& rcImageSrc,
		const pixui::BackgroundRepeat emRepeat,
		const pixui::BackgroundAttachment emAttachment,
		const pixui::ImageSlice& sliceImage,
		const pixui::color& tintColor,
		const pixui::BorderRadiuses& radius) override;
	virtual void drawBorderImage(
		pixui::uint32 id,
		pixui::uint_ptr pImage,
		const pixui::matrix& mat,
		const pixui::position& rcDraw,
		const pixui::position& rcImageSrc,
		const pixui::BackgroundRepeat emRepeat,
		const pixui::BackgroundAttachment emAttachment,
		const pixui::ImageSlice& sliceImage,
		const pixui::color& tintColor,
		const pixui::BorderRadiuses& radius) override;
	virtual void drawBorderRect(
		pixui::uint32 id,
		const pixui::matrix& mat,
		const pixui::position& stDrawPos,
		const unsigned int nLeftWidth, const pixui::BorderStyle emLeftLineType, const pixui::color& stLeftColor,
		const unsigned int nRightWidth, const pixui::BorderStyle emRightLineType, const pixui::color& stRightColor,
		const unsigned int nTopWidth, const pixui::BorderStyle emTopLineType, const pixui::color& stTopColor,
		const unsigned int nBottomWidth, const pixui::BorderStyle emBottomLineType, const pixui::color& stBottomColor,
		const pixui::BorderRadiuses& radius) override;
	virtual void drawContentImage(
		pixui::uint32 id,
		pixui::uint_ptr pImage,
		const pixui::matrix& mat,
		const pixui::position& rcDraw,
		const pixui::position& rcImageSrc,
		const pixui::BackgroundRepeat emRepeat,
		const pixui::BackgroundAttachment emAttachment,
		const pixui::ImageSlice& sliceImage,
		const pixui::color& drawColor,
		const pixui::BorderRadiuses& radius) override;
	virtual void drawContentText(
		pixui::uint32 id,
		pixui::uint_ptr hFont,
		const pixui::matrix& mat,
		const char* pszTextDraw,
		const pixui::color& drawColor,
		const pixui::position& rcDraw,
		const float fBlur,
		const float letterSpace) override;
	virtual void drawContentLine(
		pixui::uint32 id,
		const pixui::matrix& mat,
		const unsigned int unWidth,
		const pixui::BorderStyle emLineType,
		const pixui::color& tintColor,
		const pixui::point& ptStart,
		const pixui::point& ptEnd) override;

	/************************************************************************/
	//Begin for canvas draw
	virtual void* createVG(int edgeAA, int viewId) override { return nullptr; };
	virtual void deleteVG(void* nvg) override {};

	virtual void beginPath() override {};
	virtual void closePath() override {};
	virtual void setStrokeWidth(float size) override {};
	virtual void moveTo(const pixui::point& target) override {};
	virtual void lineTo(const pixui::point& target) override {};
	virtual void stroke() override {};
	virtual void fill() override {};
	virtual void drawImage(
		pixui::uint64 handle, const pixui::position& pos, 
		const pixui::matrix& mat, const pixui::position& offset,
		const pixui::size& sz, const pixui::BorderRadiuses& radius, bool texture2BackBuffer) override {};

	virtual pixui::IHFFrameBuffer* createFrameBuffer(int32_t width, int32_t height, int32_t flags) override { return nullptr; }
	virtual void bindFrameBuffer(pixui::IHFFrameBuffer* fb) override {};
	virtual void deleteFrameBuffer(pixui::IHFFrameBuffer* fb) override {};
	virtual void beginFrame(int w, int h) override {};
	virtual void endFrame() override {};
	virtual void save() override {};
	virtual void restore() override {};
	virtual void setFillStyle(float r, float g, float b, float a) override {};
	virtual void setStrokeStyle(float r, float g, float b, float a) override {};
	virtual void drawText(float x, float y, const char* text) override {};
	virtual void setLineCap(int value) override {};
	virtual void setLineJoin(int value) override {};
	virtual void setFont(pixui::uint_ptr fontId, int fontSize, float lineHeight) override {};
	virtual void rect(float x, float y, float w, float h) override {};
	virtual void bezierCurveTo(float x1, float y1, float x2, float y2, float x, float y) override {};
	virtual void quadraticCurveTo(float cx, float cy, float x, float y) override {};
	virtual void scale(float x, float y) override {};
	virtual void translate(float x, float y) override {};
	virtual void rotate(float angle) override {};
	virtual void setTransform(float a, float b, float c, float d, float e, float f) override {};
	virtual void strokeRect(
		pixui::uint32 id,
		const pixui::position& pos) override {};
	virtual void fillRect(
		pixui::uint32 id,
		const pixui::position& pos,
		const pixui::color& color) override {};
	virtual void clearRect(
		pixui::uint32 id,
		const pixui::position& pos,
		const pixui::color& color) override {};
	virtual void arc(
		float x,
		float y,
		float radius,
		float startAngle,
		float endAngle,
		int anticlockwise) {};
	virtual void arcTo(float fromX, float fromY, float toX, float toY, float radius) override {};
	//end for canvas draw
	/************************************************************************/
	
	//~ End IHostDraw Interface
	/************************************************************************/


	/************************************************************************/
	//~ Begin IPxInputProxy Interface
	virtual TSharedPtr<SWidget> GetSlateWidget() override;
	virtual void OnInputText(const FString& fstr_new_input, const bool b_end_input, const bool b_lost_focus, const bool b_replace) override;
	//~ End IPxInputProxy Interface
	/************************************************************************/

public:
	void ShowWidgetInfor();

	void AddSlotWidget(TWeakObjectPtr<UWidget> weakWidget);
	void RemoveSlotWidget(TWeakObjectPtr<UWidget> weakWidget);

protected:
	void OnAppForeground();
	void OnAppBackground();
	void OnTick(float InDeltaTime);

	//broadcast window event
	void BroadcastEvent(const int n_PxEvent, const int32 n_Param1, const int32 n_Param2, const FString& fstr_Msg);


	void AddSubWidget(TWeakObjectPtr<class UPxSubLayerWidget> subWidget);
	TWeakObjectPtr<class UPxSubLayerWidget>& GetCurSubLayer();
	TWeakObjectPtr<class UPxSubLayerWidget> PopFreeSubLayer();
	void PushFreeSubLayer(TWeakObjectPtr<class UPxSubLayerWidget> weakSubLayer);

	void CreatePxView();
	void DestroyPxView();

	//
	bool IsPxViewValid();

	void ClearDrawItem();
	void ResetDrawParams();

public:
	int32 BatchElement(PixDrawItem* ptrBatchItem);

protected:
	PixDrawItem* DrawItemFromPools(EPxDrawItem e_type);
	void FreeDrawItemPools();

public:
	//get pixui view handle
	pixui::PxViewHandle PxViewId();

public:
	/************************************************************************/
	//~ Begin static UPixUIWidget manager

	//called when pixui plugin startup
	static void StartUp();

	//called form pixui plugin tick
	static void Tick(float InDeltaTime);

	//called when pixui plugin shutdown
	static void ShutDown();

	//find by WindowId
	static UPixUIWidget* FindPixUIWidgetByID(int32 windowId);

	static void ShowWidgetsInfor();

protected:
	//when UPixUIWidget create, add to PixUIWidgets
	static void AddPixUIWidget(TWeakObjectPtr<UPixUIWidget> wptr_PixUIWidget);

	//when UPixUIWidget destroy remove form PixUIWidgets
	static void RemovePixUIWidget(TWeakObjectPtr<UPixUIWidget> wptr_PixUIWidget);

	//UPixUIWidget manager array for safe use
	static TArray<TWeakObjectPtr<UPixUIWidget>>& PixUIWidgets();

	static uint32& PixUIWidgetTotalCount();

public:
	static void NotifyAppForeground();

	static void NotifyAppBackground();

	//~ End static static UPixUIWidget manager
	/************************************************************************/

private:
	//SPixPaintWidget for draw page
	TWeakObjectPtr<class UPxSubCtrlWidget> mPtrCtrlWidget;
	TWeakObjectPtr<class UPxSubLayerWidget> mPtrRootLayerWidget;

	TWeakObjectPtr<class UPxSubLayerWidget> mPtrCurrentLayerWidget;

	TWeakObjectPtr<class UWidget> mPtrLastSlotWidget;

	TArray<TWeakObjectPtr<class UPxSubLayerWidget>> mArrayLayerWidget;
	TArray<TWeakObjectPtr<class UPxSubLayerWidget>> mArrayFreeLayerWidget;

	TArray<TWeakObjectPtr<class UWidget>> mArraySlotLayer;
	uint32 mIntCurrentZorder;

	TArray<uint32> mArrayClipType;
	uint32 mUnVirtualClipCount;

	pixui::PxViewHandle mIntPxViewId;

	//script event information
	struct ST_PX_EVENT
	{
		//close type based on EPXViewEvent::em_px_event_count
		static const int n_type_close = 1 + (int)(EPXViewEvent::em_px_event_count);

		static const int n_type_alert = 1 + n_type_close;

		static const int n_type_message = 1 + n_type_alert;

		int n_Type;         //event type
		int n_Param1;       //param 1
		int n_Param2;       //param 2
		FString fstr_Msg;   //message

		ST_PX_EVENT() {
			n_Type = n_type_close - 1;
			n_Param1 = -1;
			n_Param2 = -1;
		}
	};
	//mutex for events array
	FCriticalSection     mFcsEvent;

	//events array
	TArray<ST_PX_EVENT>  mArrayEvent;

	//prompt result value for store
	FString mFstrPromptRet;

	//auto deal with event moveto moveby sizeto sizeby
	bool mBeAutoTransForm;

	TArray<PixDrawItem*> mArrayDrawItemPools[e_px_draw_item_count];
	uint32 mUnDrawItemPoolsIndex[e_px_draw_item_count];

	//draw layer type
	EPxBatchType mEmLastBatchType;
	//batch status
	void* mPtrLastBatchStatus;
	//draw layer count
	int32 mUlCurDrawBaseLayer;
};
